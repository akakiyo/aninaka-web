{"ast":null,"code":"import _slicedToArray from\"/Users/kiyo/private/aninaka/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useCallback,useEffect}from\"react\";import{firebaseAuth}from\"../firebase\";var useFirebaseAuth=function useFirebaseAuth(){var _useState=useState(firebaseAuth.currentUser),_useState2=_slicedToArray(_useState,2),currentUser=_useState2[0],setCurrentUser=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isAuthenticated=_useState4[0],setIsAuthenticated=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];console.log(\"currentUser\",currentUser);useEffect(function(){var unmounted=false;firebaseAuth.onAuthStateChanged(function(user){if(user){user.getIdTokenResult(true).then(function(result){if(!unmounted){setIsAuthenticated(true);setCurrentUser(user);setIsLoading(false);}});}else if(!unmounted){setIsAuthenticated(false);setCurrentUser(\"\");setIsLoading(false);}});return function(){unmounted=true;};},[]);var cleanUpAuthentication=function cleanUpAuthentication(){setIsAuthenticated(false);setCurrentUser(\"\");setIsLoading(true);};var signup=useCallback(function(email,password){firebaseAuth.createUserWithEmailAndPassword(email,password).catch(function(err){return alert(err);});},[]);var login=useCallback(function(email,password){firebaseAuth.signInWithEmailAndPassword(email,password).catch(function(err){return alert(err);});},[]);var logout=useCallback(function(){firebaseAuth.signOut();cleanUpAuthentication();},[]);return{signup:signup,login:login,logout:logout,currentUser:currentUser,isAuthenticated:isAuthenticated,isLoading:isLoading};};export default useFirebaseAuth;","map":{"version":3,"sources":["/Users/kiyo/private/aninaka/frontend/src/components/auth/useFirebaseAuth.js"],"names":["useState","useCallback","useEffect","firebaseAuth","useFirebaseAuth","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","console","log","unmounted","onAuthStateChanged","user","getIdTokenResult","then","result","cleanUpAuthentication","signup","email","password","createUserWithEmailAndPassword","catch","err","alert","login","signInWithEmailAndPassword","logout","signOut"],"mappings":"0HAAA,OAASA,QAAT,CAAmBC,WAAnB,CAAgCC,SAAhC,KAAiD,OAAjD,CACA,OAASC,YAAT,KAA6B,aAA7B,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,cAAsCJ,QAAQ,CAACG,YAAY,CAACE,WAAd,CAA9C,wCAAOA,WAAP,eAAoBC,cAApB,eACA,eAA8CN,QAAQ,CAAC,KAAD,CAAtD,yCAAOO,eAAP,eAAwBC,kBAAxB,eACA,eAAkCR,QAAQ,CAAC,IAAD,CAA1C,yCAAOS,SAAP,eAAkBC,YAAlB,eACAC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BP,WAA3B,EACAH,SAAS,CAAC,UAAM,CACd,GAAIW,CAAAA,SAAS,CAAG,KAAhB,CACAV,YAAY,CAACW,kBAAb,CAAgC,SAACC,IAAD,CAAU,CACxC,GAAIA,IAAJ,CAAU,CACRA,IAAI,CAACC,gBAAL,CAAsB,IAAtB,EAA4BC,IAA5B,CAAiC,SAACC,MAAD,CAAY,CAC3C,GAAI,CAACL,SAAL,CAAgB,CACdL,kBAAkB,CAAC,IAAD,CAAlB,CACAF,cAAc,CAACS,IAAD,CAAd,CACAL,YAAY,CAAC,KAAD,CAAZ,CACD,CACF,CAND,EAOD,CARD,IAQO,IAAI,CAACG,SAAL,CAAgB,CACrBL,kBAAkB,CAAC,KAAD,CAAlB,CACAF,cAAc,CAAC,EAAD,CAAd,CACAI,YAAY,CAAC,KAAD,CAAZ,CACD,CACF,CAdD,EAgBA,MAAO,WAAM,CACXG,SAAS,CAAG,IAAZ,CACD,CAFD,CAGD,CArBQ,CAqBN,EArBM,CAAT,CAuBA,GAAMM,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CAClCX,kBAAkB,CAAC,KAAD,CAAlB,CACAF,cAAc,CAAC,EAAD,CAAd,CACAI,YAAY,CAAC,IAAD,CAAZ,CACD,CAJD,CAMA,GAAMU,CAAAA,MAAM,CAAGnB,WAAW,CAAC,SAACoB,KAAD,CAAQC,QAAR,CAAqB,CAC9CnB,YAAY,CACToB,8BADH,CACkCF,KADlC,CACyCC,QADzC,EAEGE,KAFH,CAES,SAACC,GAAD,QAASC,CAAAA,KAAK,CAACD,GAAD,CAAd,EAFT,EAGD,CAJyB,CAIvB,EAJuB,CAA1B,CAMA,GAAME,CAAAA,KAAK,CAAG1B,WAAW,CAAC,SAACoB,KAAD,CAAQC,QAAR,CAAqB,CAC7CnB,YAAY,CACTyB,0BADH,CAC8BP,KAD9B,CACqCC,QADrC,EAEGE,KAFH,CAES,SAACC,GAAD,QAASC,CAAAA,KAAK,CAACD,GAAD,CAAd,EAFT,EAGD,CAJwB,CAItB,EAJsB,CAAzB,CAMA,GAAMI,CAAAA,MAAM,CAAG5B,WAAW,CAAC,UAAM,CAC/BE,YAAY,CAAC2B,OAAb,GACAX,qBAAqB,GACtB,CAHyB,CAGvB,EAHuB,CAA1B,CAKA,MAAO,CACLC,MAAM,CAANA,MADK,CAELO,KAAK,CAALA,KAFK,CAGLE,MAAM,CAANA,MAHK,CAILxB,WAAW,CAAXA,WAJK,CAKLE,eAAe,CAAfA,eALK,CAMLE,SAAS,CAATA,SANK,CAAP,CAQD,CA3DD,CA6DA,cAAeL,CAAAA,eAAf","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport { firebaseAuth } from \"../firebase\";\n\nconst useFirebaseAuth = () => {\n  const [currentUser, setCurrentUser] = useState(firebaseAuth.currentUser);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  console.log(\"currentUser\", currentUser);\n  useEffect(() => {\n    let unmounted = false;\n    firebaseAuth.onAuthStateChanged((user) => {\n      if (user) {\n        user.getIdTokenResult(true).then((result) => {\n          if (!unmounted) {\n            setIsAuthenticated(true);\n            setCurrentUser(user);\n            setIsLoading(false);\n          }\n        });\n      } else if (!unmounted) {\n        setIsAuthenticated(false);\n        setCurrentUser(\"\");\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  const cleanUpAuthentication = () => {\n    setIsAuthenticated(false);\n    setCurrentUser(\"\");\n    setIsLoading(true);\n  };\n\n  const signup = useCallback((email, password) => {\n    firebaseAuth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((err) => alert(err));\n  }, []);\n\n  const login = useCallback((email, password) => {\n    firebaseAuth\n      .signInWithEmailAndPassword(email, password)\n      .catch((err) => alert(err));\n  }, []);\n\n  const logout = useCallback(() => {\n    firebaseAuth.signOut();\n    cleanUpAuthentication();\n  }, []);\n\n  return {\n    signup,\n    login,\n    logout,\n    currentUser,\n    isAuthenticated,\n    isLoading,\n  };\n};\n\nexport default useFirebaseAuth;\n"]},"metadata":{},"sourceType":"module"}