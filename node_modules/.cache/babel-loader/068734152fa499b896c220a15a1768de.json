{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport { firebaseAuth } from \"../firebase\";\n\nconst useFirebaseAuth = () => {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState(firebaseAuth.currentUser);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    let unmounted = false;\n    firebaseAuth.onAuthStateChanged(user => {\n      if (user) {\n        user.getIdTokenResult(true).then(result => {\n          if (!unmounted) {\n            setIsAuthenticated(true);\n            setCurrentUser(user);\n            setIsLoading(false);\n          }\n        });\n      } else if (!unmounted) {\n        setIsAuthenticated(false);\n        setCurrentUser(\"\");\n        setIsLoading(false);\n      }\n    });\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  const cleanUpAuthentication = () => {\n    setIsAuthenticated(false);\n    setCurrentUser(\"\");\n    setIsLoading(true);\n  };\n\n  const signup = useCallback(async (email, password) => {\n    const user = await firebaseAuth.createUserWithEmailAndPassword(email, password).catch(err => alert(err));\n    return user.user.multiFactor.user.uid;\n  }, []);\n  const login = useCallback((email, password) => {\n    firebaseAuth.signInWithEmailAndPassword(email, password).catch(err => alert(err));\n  }, []);\n  const logout = useCallback(() => {\n    firebaseAuth.signOut();\n    cleanUpAuthentication();\n  }, []);\n  return {\n    signup,\n    login,\n    logout,\n    currentUser,\n    isAuthenticated,\n    isLoading\n  };\n};\n\n_s(useFirebaseAuth, \"wzhxDZ/vN61+Omf2Tu3pcDTtvZk=\");\n\nexport default useFirebaseAuth;","map":{"version":3,"sources":["/Users/kiyo/private/aninaka/frontend/src/auth/useFirebaseAuth.js"],"names":["useState","useCallback","useEffect","firebaseAuth","useFirebaseAuth","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","unmounted","onAuthStateChanged","user","getIdTokenResult","then","result","cleanUpAuthentication","signup","email","password","createUserWithEmailAndPassword","catch","err","alert","multiFactor","uid","login","signInWithEmailAndPassword","logout","signOut"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAACG,YAAY,CAACE,WAAd,CAA9C;AACA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,GAAG,KAAhB;AACAR,IAAAA,YAAY,CAACS,kBAAb,CAAiCC,IAAD,IAAU;AACxC,UAAIA,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACC,gBAAL,CAAsB,IAAtB,EAA4BC,IAA5B,CAAkCC,MAAD,IAAY;AAC3C,cAAI,CAACL,SAAL,EAAgB;AACdH,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,YAAAA,cAAc,CAACO,IAAD,CAAd;AACAH,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,SAND;AAOD,OARD,MAQO,IAAI,CAACC,SAAL,EAAgB;AACrBH,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAF,QAAAA,cAAc,CAAC,EAAD,CAAd;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAdD;AAgBA,WAAO,MAAM;AACXC,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,QAAMM,qBAAqB,GAAG,MAAM;AAClCT,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAF,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAJD;;AAMA,QAAMQ,MAAM,GAAGjB,WAAW,CAAC,OAAOkB,KAAP,EAAcC,QAAd,KAA2B;AACpD,UAAMP,IAAI,GAAG,MAAMV,YAAY,CAC5BkB,8BADgB,CACeF,KADf,EACsBC,QADtB,EAEhBE,KAFgB,CAETC,GAAD,IAASC,KAAK,CAACD,GAAD,CAFJ,CAAnB;AAGA,WAAOV,IAAI,CAACA,IAAL,CAAUY,WAAV,CAAsBZ,IAAtB,CAA2Ba,GAAlC;AACD,GALyB,EAKvB,EALuB,CAA1B;AAOA,QAAMC,KAAK,GAAG1B,WAAW,CAAC,CAACkB,KAAD,EAAQC,QAAR,KAAqB;AAC7CjB,IAAAA,YAAY,CACTyB,0BADH,CAC8BT,KAD9B,EACqCC,QADrC,EAEGE,KAFH,CAEUC,GAAD,IAASC,KAAK,CAACD,GAAD,CAFvB;AAGD,GAJwB,EAItB,EAJsB,CAAzB;AAMA,QAAMM,MAAM,GAAG5B,WAAW,CAAC,MAAM;AAC/BE,IAAAA,YAAY,CAAC2B,OAAb;AACAb,IAAAA,qBAAqB;AACtB,GAHyB,EAGvB,EAHuB,CAA1B;AAKA,SAAO;AACLC,IAAAA,MADK;AAELS,IAAAA,KAFK;AAGLE,IAAAA,MAHK;AAILxB,IAAAA,WAJK;AAKLE,IAAAA,eALK;AAMLE,IAAAA;AANK,GAAP;AAQD,CA5DD;;GAAML,e;;AA8DN,eAAeA,eAAf","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport { firebaseAuth } from \"../firebase\";\n\nconst useFirebaseAuth = () => {\n  const [currentUser, setCurrentUser] = useState(firebaseAuth.currentUser);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    let unmounted = false;\n    firebaseAuth.onAuthStateChanged((user) => {\n      if (user) {\n        user.getIdTokenResult(true).then((result) => {\n          if (!unmounted) {\n            setIsAuthenticated(true);\n            setCurrentUser(user);\n            setIsLoading(false);\n          }\n        });\n      } else if (!unmounted) {\n        setIsAuthenticated(false);\n        setCurrentUser(\"\");\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  const cleanUpAuthentication = () => {\n    setIsAuthenticated(false);\n    setCurrentUser(\"\");\n    setIsLoading(true);\n  };\n\n  const signup = useCallback(async (email, password) => {\n    const user = await firebaseAuth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((err) => alert(err));\n    return user.user.multiFactor.user.uid;\n  }, []);\n\n  const login = useCallback((email, password) => {\n    firebaseAuth\n      .signInWithEmailAndPassword(email, password)\n      .catch((err) => alert(err));\n  }, []);\n\n  const logout = useCallback(() => {\n    firebaseAuth.signOut();\n    cleanUpAuthentication();\n  }, []);\n\n  return {\n    signup,\n    login,\n    logout,\n    currentUser,\n    isAuthenticated,\n    isLoading,\n  };\n};\n\nexport default useFirebaseAuth;\n"]},"metadata":{},"sourceType":"module"}